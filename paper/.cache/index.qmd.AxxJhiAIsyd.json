{
    "cells": [
        {
            "id": "1",
            "cell_type": "markdown",
            "metadata": {
            },
            "source": [
                "---\n",
                "title: \"Julia for Applied Infectious Disease Modelling\"\n",
                "author:\n",
                "  - name: \"Sam Abbott\"\n",
                "    affiliation: \"Centre for Mathematical Modelling of Infectious Diseases, London School of Hygiene & Tropical Medicine\"\n",
                "    email: \"sam.abbott@lshtm.ac.uk\"\n",
                "    orcid: \"0000-0001-8057-8037\"\n",
                "  - name: \"Sebastian Funk\"\n",
                "    affiliation: \"Centre for Mathematical Modelling of Infectious Diseases, London School of Hygiene & Tropical Medicine\"\n",
                "    email: \"sebastian.funk@lshtm.ac.uk\"\n",
                "    orcid: \"0000-0002-2842-3406\"\n",
                "date: today\n",
                "abstract: |\n",
                "  Infectious disease modelling plays a critical role in public health decision-making, from outbreak response to long-term planning.\n",
                "  The field faces mounting challenges as models grow increasingly complex, incorporate greater ranges of real-time data streams, and explore more intervention scenarios.\n",
                "  Current approaches require either sacrificing performance for ease of use in high-level languages like R and Python, or accessibility for speed in low-level implementations.\n",
                "  Domain-specific tools provide targeted solutions but lack integration with broader scientific computing advances, whilst general-purpose frameworks have steep learning curves, and often don't have all the features needed for applied infectious disease modelling.\n",
                "  Julia addresses these challenges through its combination of multiple dispatch, native performance, and coherent scientific ecosystem.\n",
                "  We examine Julia's key features and summarise its ecosystem for infectious disease modelling, spanning the SciML ecosystem, JuMP, AlgebraicJulia, Turing.jl, Gen.jl and RxInfer.jl, other model fitting options, neural networks, automatic differentiation, and data science tools.\n",
                "  Through three case studies, we show how these components integrate to support complex epidemiological models.\n",
                "  Julia offers a unique combination of performance, expressiveness, and composability that addresses limitations of both pipeline and monolithic modelling approaches.\n",
                "format:\n",
                "  pdf:\n",
                "    documentclass: article\n",
                "    geometry: margin=1in\n",
                "    fontsize: 11pt\n",
                "    linestretch: 1.5\n",
                "    keep-tex: false\n",
                "    number-sections: true\n",
                "    colorlinks: true\n",
                "bibliography: library.bib\n",
                "csl: https://www.zotero.org/styles/plos-computational-biology\n",
                "execute:\n",
                "  echo: true\n",
                "  warning: false\n",
                "  cache: true\n",
                "julia:\n",
                "  exeflags: [\"+1.11.6\", \"--threads=4\", \"-O3\"]\n",
                "---\n",
                "\n",
                "## Introduction\n",
                "\n",
                "Infectious disease modelling (IDM) plays a critical role in public health decision-making, from outbreak response to long-term planning.\n",
                "The field faces mounting challenges as models grow increasingly complex, incorporate a greater range of real-time data streams, and explore more intervention scenarios.\n",
                "This complexity manifests in both computational demands and code maintenance challenges, making it difficult to produce impactful work within the timescales that matter when responding rapidly to emerging threats.\n",
                "\n",
                "Modern outbreak response often requires rapid development and deployment of novel methods, frequently combining multiple modelling approaches to address emerging threats.\n",
                "This challenge is highlighted by tools like EpiNow2 [@abbott2020estimating; @epinow2] and EpiNowcast [@epinowcast], which despite their success, have struggled to integrate novel features and methodological advances from the broader modelling community.\n",
                "The difficulty in incorporating external contributions and specialised backend tools, even for established projects, highlights a challenge in the field.\n",
                "While approaches like epidist [@epidist], which builds on top of brms, demonstrate one path toward integration, such solutions are often limited in scope and only available for certain model types.\n",
                "\n",
                "There are all so challenges in wider epidemiological research practice.\n",
                "The implementation of Bayesian workflows remains particularly challenging for many practitioners, requiring expertise in both statistical methodology and computational techniques.\n",
                "Furthermore, the current paradigm of research study development often requires teams to rebuild complex model frameworks from scratch, leading to duplicated effort, potential inconsistencies, and slower scientific progress.\n",
                "Even with advances in computing power, the persistent tension between computational performance and accessibility continues to impede both rapid outbreak response and longer-term research projects, where sophisticated models must be balanced against practical constraints of time and expertise.\n",
                "\n",
                "Several solutions have been proposed to address these challenges, including domain-specific tools like odin and pomp, as well as general-purpose probabilistic programming languages like Stan [@carpenter2017stan] and JAX [@jax2018github]. While these tools have made important contributions, they often face significant limitations.\n",
                "Domain-specific solutions, while powerful for their intended use cases, typically lack integration with broader scientific computing ecosystems, making it difficult to leverage advances in fields like differential equations or optimization.\n",
                "Meanwhile, general-purpose tools like Stan [@carpenter2017stan] and JAX [@jax2018github], despite their mathematical sophistication, can be challenging to use effectively without substantial programming expertise.\n",
                "Furthermore, the development of efficient algorithms and implementation patterns often falls to domain experts rather than being handled by dedicated numerical computing specialists, leading to potential inefficiencies and missed opportunities for optimization.\n",
                "\n",
                "This paper explores how Julia [@bezanson2017julia] addresses these challenges through its design philosophy and scientific ecosystem.\n",
                "We examine Julia's key features, including multiple dispatch, native performance, and metaprogramming, that enable efficient implementation of epidemiological models whilst maintaining code accessibility.\n",
                "We summarise Julia's ecosystem for infectious disease modelling, spanning the SciML ecosystem, JuMP, AlgebraicJulia, Turing.jl, Gen.jl and RxInfer.jl, other model fitting options, neural networks, automatic differentiation, and data science tools.\n",
                "Through three case studies, we show how these components integrate to support complex epidemiological models.\n",
                "Finally, we discussion of Julia's potential to address current challenges in infectious disease modelling and directions for future work.\n",
                "\n",
                "## Key features of the Julia language\n",
                "\n",
                "- Multiple Dispatch and Type System\n",
                "- Native Performance\n",
                "- Metaprogramming\n",
                "- Package Interoperability\n",
                "- Interactive\n",
                "- Auto-differentation\n",
                "\n",
                "## The Ecosystem\n",
                "\n",
                "### The Scientific Machine Learning Ecosystem (SciML)\n",
                "\n",
                "### Julia for Mathematical Programming (JuMP)\n",
                "\n",
                "### Applied Category Theory in Julia (AlgebraicJulia)\n",
                "\n",
                "- EpiCats.jl\n",
                "\n",
                "### Turing.jl\n",
                "\n",
                "- Turing.jl [@fjelde2025turin]\n",
                "- ecosystem\n",
                "- PPL\n",
                "- DynamicPPL\n",
                "- JuliaBugs\n",
                "- Inference\n",
                "- Other cool stuff?\n",
                "\n",
                "### Gen.jl and RxInfer.jl\n",
                "\n",
                "- Gen.jl [@cusumano2019gen]\n",
                "\n",
                "### Other Model Fitting Options\n",
                "\n",
                "- Pigeons.jl parallel tempering - PPL agnostic\n",
                "- Others?\n",
                "\n",
                "### Neural networks\n",
                "\n",
                "- Lux.jl https://lux.csail.mit.edu/stable/introduction/overview\n",
                "\n",
                "### Agent-Based Modeling\n",
                "\n",
                "Agents.jl [@datseris2022agents] provides a comprehensive framework for agent-based modeling in Julia.\n",
                "The package offers high-performance simulations with minimal code complexity, supporting both continuous and discrete agent-based models.\n",
                "Its integration with the broader Julia ecosystem enables seamless incorporation of differential equations, optimisation, and statistical analysis within agent-based simulations, making it particularly valuable for epidemiological modeling where individual-level interactions drive population-level dynamics.\n",
                "\n",
                "### Automatic Differentiation\n",
                "\n",
                "- Able to switch to different auto differentiation approaches\n",
                "- Enables picking the one that works best for your problem\n",
                "- Also allows for benefiting from ongoing research as can swap in new options as they become available.\n",
                "- Forward differentiation and reverse differentiation\n",
                "- Enzyme, Mooncake\n",
                "\n",
                "### Data Science Tools\n",
                "\n",
                "Julia provides a comprehensive data science ecosystem that complements its scientific computing capabilities.\n",
                "DataFrames.jl and DataFramesMeta.jl offers powerful tabular data manipulation, while visualization libraries like Makie.jl.\n",
                "The AlgebraOfGraphics.jl (AoG) package provides a grammar of graphics system, and the Tidier.jl ecosystem brings familiar data wrangling patterns to Julia users.\n",
                "These tools integrate seamlessly with the modeling and inference capabilities discussed above, enabling end-to-end workflows from data preparation through analysis and visualization.\n",
                "\n",
                "## Case Studies\n",
                "\n",
                "Julia has already been used successfully in several epidemiological modelling studies, demonstrating its growing adoption within the infectious disease modelling community.\n",
                "A notable example is the Epirecipes project [@epirecipes], originally a multi-language collection of epidemiological models, which has increasingly focused on Julia implementations.\n",
                "The project serves as a \"cookbook\" of epidemiological models, showcasing Julia's versatility through diverse approaches to classical models like SIR: from compositional modelling using AlgebraicJulia's category theory framework (EpiCats), to Bayesian parameter estimation with Gen.jl and Turing.jl, to advanced stochastic processes and bifurcation analysis.\n",
                "This demonstrates how Julia's ecosystem enables researchers to explore the same epidemiological concepts through multiple complementary computational paradigms whilst maintaining code reusability and mathematical rigour.\n",
                "The following case studies build upon this foundation to illustrate specific aspects of Julia's capabilities for infectious disease modelling.\n",
                "\n",
                "### Case Study 1: Compartmental Susceptible-Exposed-Infectious-Recovered (SEIR) Model with time-varying transmission rate\n",
                "\n",
                "1. ODE Model Specification\n",
                "   - Define SEIR differential equations using SciML ecosystem\n",
                "   - Implement core compartmental structure\n",
                "   - Validate numerical stability and solver choice\n",
                "\n",
                "2. Time-varying Transmission Rate\n",
                "   - AR(1) process model for transmission rate β(t)\n",
                "   - Connect latent AR process to ODE system dynamics\n",
                "   - Leverage existing parameter validation from previous case\n",
                "\n",
                "3. Observation Process\n",
                "   - Apply negative binomial observation model\n",
                "   - Extend observation layer to capture:\n",
                "     - Incidence data from E→I transitions\n",
                "     - Prevalence data from I compartment\n",
                "\n",
                "4. Complete Model Integration\n",
                "   - Combine deterministic ODE backbone with stochastic components\n",
                "   - Link transmission process to compartmental dynamics\n",
                "   - Connect compartmental states to observation layer\n",
                "   - Implement efficient Bayesian inference pipeline\n",
                "\n",
                "5. Model Validation\n",
                "   - Simulate data from the model\n",
                "   - Fit to the simulated data i.e. SBC\n",
                "   - Simulate a known beta scenario\n",
                "   - Fit and recover from it.\n",
                "\n",
                "### Case study 2: TBD\n",
                "\n",
                "Potential options:\n",
                "\n",
                "- Petri net composition of a SEIR model with age structure and variant dynamics. Simulate from and integrate into Turing for fitting. Something like: https://github.com/epirecipes/EpiCats/blob/main/pn_stratify_ageclasses/pn_stratify_ageclasses.md but extended.\n",
                "- Agent.jl model to Gen.jl via Genify.jl (https://github.com/probcomp/Genify.jl)\n",
                "- Neural ODEs: SEIR w/ AR + NN interaction terms: https://github.com/vboussange/HybridDynamicModels.jl\n",
                "- UDEs SEIR with NN on multiple datasets: https://www.sciencedirect.com/science/article/pii/S240584402401394X\n",
                "\n",
                "Some or all of the case studies likely need to include real data to convince applied modellers at the same time we want to keep the high level and schematic to make this achievable and to make sure we can communicate the key points.\n",
                "\n",
                "### Case study 3 : TBD\n",
                "\n",
                "## Discussion\n",
                "\n",
                "This paper has examined Julia's capacity to address barriers in infectious disease modelling through its combination of performance, composability, and scientific ecosystem integration.\n",
                "We have outlined Julia's key features including multiple dispatch, native performance, and metaprogramming that enable efficient implementation of epidemiological models.\n",
                "We have summarised Julia's ecosystem spanning the SciML ecosystem, JuMP, AlgebraicJulia, Turing.jl, Gen.jl and RxInfer.jl, other model fitting options, neural networks, automatic differentiation, and data science tools that integrate to create a coherent environment for model development.\n",
                "Through our case studies, we have shown how these components support compartmental models with time-varying transmission, combining deterministic dynamics with stochastic processes and Bayesian inference.\n",
                "While challenges remain in compilation times and community size, Julia provides a coherent approach to infectious disease modelling that eliminates the traditional trade-off between accessibility and performance.\n",
                "\n",
                "<!-- Summary of key findings -->\n",
                "-   Demonstrated Julia's unique position in scientific computing for IDM through multiple dispatch, native performance, and seamless package interoperability\n",
                "-   Showed how ecosystem components work together cohesively, enabling \"two-language problem\" elimination from prototyping to production\n",
                "-   Illustrated practical benefits through case studies spanning differential equations, Bayesian inference, and automatic differentiation\n",
                "\n",
                "<!-- Strengths and limitations interwoven -->\n",
                "-   True language-level composability between packages enables rapid model development and component reuse, though requires learning curve for researchers familiar with monolithic approaches in R/Python\n",
                "-   Rich type system enabling both safety and performance facilitates systematic model validation, yet compilation times can impact interactive development workflow\n",
                "-   Growing, academically-focused ecosystem provides cutting-edge scientific computing tools, however IDM-specific tooling remains limited compared to established R/Python packages\n",
                "-   Native performance eliminates computational bottlenecks common in other high-level languages, but smaller community means fewer domain-specific examples and tutorials\n",
                "\n",
                "<!-- Comparison to literature - JAX and NumPyro -->\n",
                "While JAX [@jax2018github] offers automatic differentiation and acceleration, it remains a framework rather than a language solution, leading to limited expressiveness due to Python's underlying type system, restricted functional programming patterns, and complex deployment challenges.\n",
                "Julia's multiple dispatch provides more natural problem expression for epidemiological models, particularly when implementing complex infectious disease models with feedback loops, integrating real-time data streams for forecasting, or mixing deterministic and stochastic model components.\n",
                "\n",
                "<!-- Comparison to literature - Stan and related tools -->\n",
                "Traditional probabilistic programming languages like Stan [@carpenter2017stan] suffer from limited flexibility in model specification, separation between modelling and analysis environments, and performance overhead from interface translations.\n",
                "Julia's native probabilistic programming through Turing.jl addresses these limitations whilst supporting stochastic differential equations, discrete event simulation, and agent-based modelling approaches that are essential for comprehensive infectious disease analysis.\n",
                "\n",
                "<!-- Future work -->\n",
                "Areas for future work include developing a cohesive epidemiology metapackage that provides domain-specific abstractions for common IDM patterns whilst connecting to the broader Julia ecosystem.\n",
                "Priority areas include standardised interfaces for model specification, parameter estimation, intervention modelling, and real-time forecasting.\n",
                "Technical improvements needed include further reducing compilation latency, expanding GPU support across the ecosystem, and developing IDM-specific visualisation recipes alongside standardised benchmarks for IDM applications.\n",
                "\n",
                "<!-- Conclusions -->\n",
                "Julia represents a significant advance in scientific computing for IDM, offering a unique combination of performance, expressiveness, and composability that addresses fundamental limitations of both pipeline and monolithic modelling approaches.\n",
                "Whilst some challenges remain, the foundation is set for a robust, maintainable, and efficient approach to infectious disease modelling that can adapt to future computational and methodological advances.\n",
                "Action must be taken to provide the necessary support for Julia adoption in the IDM community including composable, interoperable, and performant tools, educational materials, and community engagement.\n",
                "\n",
                "## Acknowledgements\n",
                "\n",
                "## References {.unnumbered}\n",
                "::: {#refs}\n",
                ":::"
            ]
        }
    ],
    "timestamp": "2025-09-25T17:00:03.752",
    "file": "/Users/lshsa2/code/JuliaForIDM/paper/index.qmd",
    "qnr_schema_version": "1.0.0"
}